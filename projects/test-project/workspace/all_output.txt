I will create a Snake game in Python using the MVC (Model-View-Controller) pattern. The game will have keyboard controls for user input. The project will be structured as follows:

1. main.py: The entry point of the application.
2. model.py: Contains the game's data model classes.
3. view.py: Contains the game's view classes for rendering.
4. controller.py: Contains the game's controller classes for handling user input.
5. requirements.txt: Lists the required packages for the project.

Now, I will provide the content of each file.

main.py
```python
from controller import GameController

def main():
    game_controller = GameController()
    game_controller.run()

if __name__ == "__main__":
    main()
```

model.py
```python
from dataclasses import dataclass

@dataclass
class Point:
    x: int
    y: int

class Snake:
    def __init__(self, initial_position: Point, initial_length: int):
        self.body = [initial_position] * initial_length
        self.direction = Point(1, 0)

    def move(self):
        head = self.body[0]
        new_head = Point(head.x + self.direction.x, head.y + self.direction.y)
        self.body.insert(0, new_head)
        self.body.pop()

    def change_direction(self, new_direction: Point):
        self.direction = new_direction

    def grow(self):
        self.body.append(self.body[-1])

class Food:
    def __init__(self, position: Point):
        self.position = position
```

view.py
```python
import pygame
from model import Snake, Food

class GameView:
    def __init__(self, snake: Snake, food: Food, screen_size: tuple, block_size: int):
        pygame.init()
        self.snake = snake
        self.food = food
        self.screen = pygame.display.set_mode(screen_size)
        self.block_size = block_size

    def draw(self):
        self.screen.fill((0, 0, 0))
        for segment in self.snake.body:
            pygame.draw.rect(self.screen, (255, 255, 255), (segment.x * self.block_size, segment.y * self.block_size, self.block_size, self.block_size))
        pygame.draw.rect(self.screen, (255, 0, 0), (self.food.position.x * self.block_size, self.food.position.y * self.block_size, self.block_size, self.block_size))
        pygame.display.flip()

    def quit(self):
        pygame.quit()
```

controller.py
```python
import pygame
import random
from model import Snake, Food, Point
from view import GameView

class GameController:
    def __init__(self):
        self.snake = Snake(Point(10, 10), 3)
        self.food = Food(self.generate_food_position())
        self.view = GameView(self.snake, self.food, (640, 480), 20)

    def run(self):
        clock = pygame.time.Clock()
        running = True

        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    self.handle_keydown(event.key)

            self.snake.move()
            self.check_collision()
            self.view.draw()
            clock.tick(10)

        self.view.quit()

    def handle_keydown(self, key):
        if key == pygame.K_UP:
            self.snake.change_direction(Point(0, -1))
        elif key == pygame.K_DOWN:
            self.snake.change_direction(Point(0, 1))
        elif key == pygame.K_LEFT:
            self.snake.change_direction(Point(-1, 0))
        elif key == pygame.K_RIGHT:
            self.snake.change_direction(Point(1, 0))

    def check_collision(self):
        head = self.snake.body[0]
        if head == self.food.position:
            self.snake.grow()
            self.food.position = self.generate_food_position()

    def generate_food_position(self):
        return Point(random.randint(0, 31), random.randint(0, 23))
```

requirements.txt
```
pygame==2.1.2
```

To run the game, install the required packages using `pip install -r requirements.txt` and then execute `python main.py`.